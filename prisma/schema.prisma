// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id               Int           @id @default(autoincrement())
  uuid             String        @unique @default(uuid()) @db.VarChar(80)
  username         String        @db.VarChar(80)
  password         String        @db.VarChar(80)
  personal_data_id Int           @unique
  personal_data    Personal_data @relation(fields: [personal_data_id], references: [id])
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt
  deleted_at       DateTime?

  @@map("admins")
}

model Personal_data {
  id            Int       @id @default(autoincrement())
  uuid          String    @unique @default(uuid()) @db.VarChar(80)
  name          String    @db.VarChar(80)
  rg_document   String    @unique @db.VarChar(11)
  cpf           String    @unique @db.VarChar(11)
  email         String    @db.VarChar(80)
  phone         String    @db.VarChar(11)
  date_of_birth DateTime
  gender        GENDER
  admin         Admin?
  client        Client?
  address_id    Int?
  employee_id   Int?
  addresses     Address?  @relation(fields: [address_id], references: [id])
  employee      Employee? @relation(fields: [employee_id], references: [id])
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  deleted_at    DateTime?

  @@map("personal_data")
}

model Client {
  id               Int            @id @default(autoincrement())
  uuid             String         @unique @default(uuid()) @db.VarChar(80)
  personal_data_id Int            @unique
  enrollment       Enrollment     @relation(fields: [enrollment_id], references: [id])
  personal_data    Personal_data? @relation(fields: [personal_data_id], references: [id])
  payment          Payment        @relation(fields: [payment_id], references: [id])
  payment_id       Int
  enrollment_id    Int
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt
  deleted_at       DateTime?

  @@map("clients")
}

model Payment {
  id             Int             @id @default(autoincrement())
  uuid           String          @unique @default(uuid()) @db.VarChar(80)
  price          Decimal         @db.Decimal(10, 2)
  status         STATUS_PAYMENT
  payment_method PAYMENT_METHOD?
  client         Client[]
  enrollment     Enrollment[]
  created_at     DateTime        @default(now())
  updated_at     DateTime        @updatedAt
  deleted_at     DateTime?

  @@map("payments")
}

model Employee {
  id               Int             @id @default(autoincrement())
  uuid             String          @unique @default(uuid()) @db.VarChar(80)
  office           OFFICES
  personal_data    Personal_data[]
  personal_data_id Int
  created_at       DateTime        @default(now())
  updated_at       DateTime        @updatedAt
  deleted_at       DateTime?

  @@map("employees")
}

model Address {
  id               Int             @id @default(autoincrement())
  uuid             String          @unique @default(uuid()) @db.VarChar(80)
  zipcode          String
  address          String
  number           String?
  city             String
  complement       String
  neighborhood     String
  personal_data    Personal_data[]
  personal_data_id Int?
  created_at       DateTime        @default(now())
  updated_at       DateTime        @updatedAt
  deleted_at       DateTime?

  @@map("addresses")
}

model Enrollment {
  id           Int                @id @default(autoincrement())
  uuid         String             @unique @default(uuid()) @db.VarChar(80)
  payment_date DateTime?
  status       STATUS_ENROLLMENTS
  payment      Payment?           @relation(fields: [payment_id], references: [id])
  client       Client[]
  modalities   Modality[]
  payment_id   Int?
  created_at   DateTime           @default(now())
  updated_at   DateTime           @updatedAt
  deleted_at   DateTime?

  @@map("enrollments")
}

model Modality {
  id          Int            @id @default(autoincrement())
  uuid        String         @unique @default(uuid()) @db.VarChar(80)
  name        MODALITY_NAMES
  enrollments Enrollment[]
  created_at  DateTime       @default(now())
  updated_at  DateTime       @updatedAt
  deleted_at  DateTime?

  @@map("modalities")
}

enum MODALITY_NAMES {
  ZUMBA
  MUSCULACAO
  NATACAO
  SPINNING
}

enum STATUS_ENROLLMENTS {
  ACTIVE
  CANCELLED
}

enum STATUS_PAYMENT {
  PAID
  EXPIRED
  CANCELLED
  AWAITING_PAYMENT
}

enum GENDER {
  M
  F
  NB
}

enum PAYMENT_METHOD {
  CREDIT_CARD
  PIX
  DEBIT_CARD
  MONEY
}

enum OFFICES {
  PERSONAL_TRAINER
  CLEANER
  TRAINEE
  TEACHERS
}
